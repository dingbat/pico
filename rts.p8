pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
cx=0
cy=0
mapw=256
maph=256
fows=8

selbox=nil
selection=false
units={}

fps=0

obstacles={}

function _init()
	--enable mouse & mouse btns
	poke(0x5f2d,0x1|0x2)
	
	for x=1,mapw/8 do
	 obstacles[x]={}
	 for y=1,maph/8 do
	 	if fget(mget(x-1,y-1), 0) then
	 		obstacles[x][y]=1
	 	end
	 end
	end
	
	units={
		{
			typ=t_ant,
			x=15,
			y=28,
			st=st_rest,
			obj=obj_shr,
			fr=1,
			frmax=2,
			dir=1,
			p=1,
		},
		{
			typ=t_ant,
			x=45,
			y=26,
			st=st_rest,
			obj=nil,
			fr=1,
			frmax=2,
			dir=1,
			p=1
		},
		{
			typ=t_rock,
			x=5*8,
			y=4*8,
			inert=true,
		},
	}
end

function _draw()
 cls()
 camera(cx%8,cy%8)
	map(cx/8,cy/8,0,0,17,17)
	camera(cx,cy)
	
	foreach(units,draw_unit)
	
	draw_fow()

	--selection box
	if selbox then
		fillp(▒)
		rect(selbox[1],selbox[2],selbox[3],selbox[4],7)
		fillp(0)
	end
	
	--mouse
	mx=mid(0,stat(32),128-5)
	my=mid(-1,stat(33),128-6)
	camera(0,0)
	spr(64,mx,my)
end

function darken(x,y,a)
 if (a==0) return
 pal(1,0)
	fillp(▒)
	local sw=4
	rectfill(x-sw,y-sw,x+fows+sw,y+fows+sw,1)
	fillp(0)
	rectfill(x,y,x+fows,y+fows,1)
	pal(1,1)
end

function dist(dx,dy)
 local maskx,masky=dx>>31,dy>>31
 local a0,b0=(dx+maskx)^^maskx,(dy+masky)^^masky
 if a0>b0 then
  return a0*0.9609+b0*0.3984
 end
 return b0*0.9609+a0*0.3984
end

function mindist(x,y)
	local md=999
	for u in all(units) do
		if u.p==1 then
		 local dx=u.x-x
		 local dy=u.y-y
			local d=dist(dx,dy)
			if (d<md) md=d
		end
	end
	return md
end

function viz(x,y)
	local d=mindist(x,y)
	if (d<25) return 0
	return 1
end

function draw_fow()
	camera(0,0)  	
	for x=0,128/fows do
	 for y=0,128/fows do
	 	local mapx=x*fows+flr(cx/fows)*fows
	 	local mapy=y*fows+flr(cy/fows)*fows
	 	local drawx=x*fows-cx%fows
	 	local drawy=y*fows-cy%fows
	 	local shade=viz(mapx,mapy)
	 	darken(
	 	 drawx,
	 	 drawy,
	 	 shade
	 	)
	 end
	end
	camera(cx,cy)
end

function intersect(r1,r2)
	local r1_x1=min(r1[1],r1[3])
	local r1_x2=max(r1[1],r1[3])
	local r1_y1=min(r1[2],r1[4])
	local r1_y2=max(r1[2],r1[4])
	return (
		r1_x1<r2[3] and
		r1_x2>r2[1] and
		r1_y1<r2[4] and
		r1_y2>r2[2]
	)
end

function u_rect(u)
	local s=size[u.typ]
 return {u.x,u.y,u.x+s,u.y+s}
end

function draw_unit(u)
 local cr={cx,cy,cx+128,cy+128}
	if not intersect(u_rect(u),cr) then
		return
	end
	if u.typ==t_ant then
		draw_ant(u)
		if u.wayp then
			for i=1,#u.wayp do
			 pset(u.wayp[i][1],u.wayp[i][2],8)
			end
		end
	end
end
-->8
--gfx

t_ant=1
t_rock=2

st_rest=1
st_move=2

obj_shr=1
obj_wat=2
obj_pla=3

size={
	4, --ant
	8, --rock
}

function draw_ant(a)
	local frames={}
	if a.st==st_rest then
		if a.obj==obj_shr then
			frames={{16,4},{8,12}}
		elseif a.obj==obj_wat then
			frames={{16,0},{12,8}}
		elseif a.obj==obj_pla then
			frames={{8,4},{12,12}}
		else
			frames={{8,0},{8,8}}
		end
	elseif a.st==st_move then
		if a.obj==obj_shr then
			frames={{16,4},{20,4}}
		elseif a.obj==obj_wat then
			frames={{16,0},{20,0}}
		elseif a.obj==obj_pla then
			frames={{8,4},{12,4}}
		else
			frames={{8,0},{12,0}}
		end
	end
	local f=frames[a.fr]
	local s=size[a.typ]
	if a.sel then
		pal(4,9)
	end
	sspr(f[1],f[2],s,s,a.x,a.y,s,s,a.dir==1)
	pal(4,4)
end
-->8
--update

function update_unit(u)
 if (u.inert) return
	if selbox then
		u.sel=intersect(
			selbox,
			u_rect(u)
		)
	end
	if fps%30==0 then
		u.fr+=1
		if (u.fr>u.frmax) u.fr=1
 end
 if u.wayp then
 	local wp=u.wayp[1]
 	local xv=wp[1]-u.x
 	local yv=wp[2]-u.y
 	local dx=0
 	local dy=0
 	if abs(xv)>abs(yv) then
 		dx=sgn(xv)
 		dy=abs(yv/xv)*sgn(yv)
 	else
 		dy=sgn(yv)
 		dx=abs(xv/yv)*sgn(xv)
 	end
 	dx/=6
 	dy/=6
 	
	 u.dir=sgn(dx)
 	u.x+=dx
 	u.y+=dy
 	
 	local int=nil
 	--[[
 	for i=1,#units do
 	 if u!=units[i] then
	 		local u2=u_rect(units[i])
	 		if intersect(u2,u_rect(u)) then
	 			int=u2
	 			break
	 		end
	 	end
 	end
 	--]]
 	
 	if int then
 		u.x-=dx
 		u.y-=dy
 		--recompute wayp
 	elseif (
 	 abs(u.x-wp[1])<2 and
 	 abs(u.y-wp[2])<2
 	) then
 		delete_wp(u)
 	end
 end
end

function delete_wp(u)
	deli(u.wayp,1)
	if #u.wayp==0 then
		u.wayp=nil
		u.st=st_rest
	end
end

function move(u,x,y)
	u.wayp=get_wayp(u,x,y)
	if u.wayp then
		u.st=st_move
	end
end

function _update()
	fps=(fps+1)%30
	
 --map scroll
 if (btn(⬅️) or btn(⬅️,1))cx-=2
 if (btn(⬆️) or btn(⬆️,1))cy-=2
 if (btn(➡️) or btn(➡️,1))cx+=2
 if (btn(⬇️) or btn(⬇️,1))cy+=2
 cx=mid(0,cx,mapw-128)
 cy=mid(0,cy,maph-128)
 
 --left drag makes selection
 if (btn(5)) then
 	if selbox==nil then
 		selbox={mx,my,mx,my}
 	else
	 	selbox[3]=mx
	 	selbox[4]=my
 	end
 	selection=true
 else
 	selbox=nil
 end
	
	--left click clears selection
 if (btnp(5)) then
 	selection=false
 end
 
 --right click moves selection
 if (btnp(4)) then
 	for i=1,#units do
 		local u=units[i]
 		if u.sel then
	 		move(u,mx,my)
 		end
 	end
 end
 
 foreach(units,update_unit)
end
-->8
--a*
--https://t.co/nasud3d1ix

function find_path
(start,
 goal,
 estimate,
 edge_cost,
 neighbors, 
 node_to_id, 
 graph)
 
 -- the final step in the
 -- current shortest path
 local shortest, 
 -- maps each node to the step
 -- on the best known path to
 -- that node
 best_table = {
  last = start,
  cost_from_start = 0,
  cost_to_goal = estimate(start, goal, graph)
 }, {}

 best_table[node_to_id(start, graph)] = shortest

 -- array of frontier paths each
 -- represented by their last
 -- step, used as a priority
 -- queue. elements past
 -- frontier_len are ignored
 local frontier, frontier_len, goal_id, max_number = {shortest}, 1, node_to_id(goal, graph), 32767.99

 -- while there are frontier paths
 while frontier_len > 0 do

  -- find and extract the shortest path
  local cost, index_of_min = max_number
  for i = 1, frontier_len do
   local temp = frontier[i].cost_from_start + frontier[i].cost_to_goal
   if (temp <= cost) index_of_min,cost = i,temp
  end
 
  -- efficiently remove the path 
  -- with min_index from the
  -- frontier path set
  shortest = frontier[index_of_min]
  frontier[index_of_min], shortest.dead = frontier[frontier_len], true
  frontier_len -= 1

  -- last node on the currently
  -- shortest path
  local p = shortest.last
  
  if node_to_id(p, graph) == goal_id then
   -- we're done.  generate the
   -- path to the goal by
   -- retracing steps. reuse
   -- 'p' as the path
   p = {goal}

   while shortest.prev do
    shortest = best_table[node_to_id(shortest.prev, graph)]
    add(p, shortest.last)
   end

   -- we've found the shortest path
   return p
  end -- if

  -- consider each neighbor n of
  -- p which is still in the
  -- frontier queue
  for n in all(neighbors(p, graph)) do
   -- find the current-best
   -- known way to n (or
   -- create it, if there isn't
   -- one)
   local id = node_to_id(n, graph)
   local old_best, new_cost_from_start =
    best_table[id],
    shortest.cost_from_start + edge_cost(p, n, graph)
   
   if not old_best then
    -- create an expensive
    -- dummy path step whose
    -- cost_from_start will
    -- immediately be
    -- overwritten
    old_best = {
     last = n,
     cost_from_start = max_number,
     cost_to_goal = estimate(n, goal, graph)
    }

    -- insert into queue
    frontier_len += 1
    frontier[frontier_len], best_table[id] = old_best, old_best
   end -- if old_best was nil

   -- have we discovered a new
   -- best way to n?
   if not old_best.dead and old_best.cost_from_start > new_cost_from_start then
    -- update the step at this
    -- node
    old_best.cost_from_start, old_best.prev = new_cost_from_start, p
   end -- if
  end -- for each neighbor
  
 end -- while frontier not empty

 -- unreachable, so implicitly
 -- return nil
end
-->8
tw=4
f=(8/tw)

function get_wayp(u,x,y)
 local nodes=find_path(
		{flr(u.x/tw),flr(u.y/tw)},
		{flr(x/tw),flr(y/tw)},
		estimate,
		edge_cost,
  neighbors,
  node_to_id,
  nil
 )
 --todo get as close as possible
 if (not nodes) return nil
 local wayp={}
 for i=1,#nodes do
 	local n=nodes[#nodes-(i-1)]
 	add(wayp,
 		{n[1]*tw+tw/2,
 		 n[2]*tw+tw/2}
 	)
 end
 return wayp
end

function estimate(n1,n2,g)
 return dist(n1[1]-n2[1],n1[2]-n2[2])
end

function edge_cost(n1,n2,g)
	return 1
end

function obstacle(x,y)
	x=flr(x/f)+1
	y=flr(y/f)+1
	if x<1 or x>=mapw/8 or y<1 or y>=mapw/8 then
	 return nil
	end
	return obstacles[x][y]
end

function neighbor(ns,x,y)
 if (
 	x<0 or x>=mapw/tw or
		y<0 or y>=maph/tw or
		obstacle(x,y) or
		obstacle(x-1,y) or
		obstacle(x+1,y) or
		obstacle(x,y-1) or
		obstacle(x,y+1)
	) then
		return
	end
	add(ns,{x,y})
end

function neighbors(n,g)
	local ns={}
	neighbor(ns,n[1]-1,n[2])
	neighbor(ns,n[1]  ,n[2]-1)
	neighbor(ns,n[1]  ,n[2]+1)
	neighbor(ns,n[1]+1,n[2])
	
	if false then
	neighbor(ns,n[1]-1,n[2]+1)
	neighbor(ns,n[1]+1,n[2]-1)
	neighbor(ns,n[1]+1,n[2]+1)
	neighbor(ns,n[1]-1,n[2]-1)
	end
	return ns
end

function node_to_id(node,g)
	return node[1]..","..node[2]
end
__gfx__
00000000000000000c0000c000000000600006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000cc000cc000000c0006000060d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070001100011011000110000cc00011000110d000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000010001000100010111011100010001005111000d000000dd0000000000000000000000000000000000000000000000000000000000000000000000
000770000b0000b00800008000000000000000000051111000511100005111000000000000000000000000000000000000000000000000000000000000000000
00700700bb000bb08800088008000b00600000000001111000511110005111100000000000000000000000000000000000000000000000000000000000000000
0000000001100011011000118800bb0006000000000d1d10000d1d100001d1d00000000000000000000000000000000000000000000000000000000000000000
00000000000100010001000101110111011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000c000000000600006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000cc000cc000000c0006000060d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000002200022022000220000cc00022000220d000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000020002000200020222022200020002005222000d000000dd0000000000000000000000000000000000000000000000000000000000000000000000
000000000b0000b00800008000000000000000000052222000522200005222000000000000000000000000000000000000000000000000000000000000000000
00000000bb000bb08800088008000b00600000000002222000522220005222200000000000000000000000000000000000000000000000000000000000000000
0000000002200022022000228800bb00060000000006262000062620000262600000000000000000000000000000000000000000000000000000000000000000
00000000000200020002000202220222022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000050505000000000000000000000000000000000000000000000000000000000000000000000000000000000
00505050005050500050505005050500050505000501510500000000000000000000000000000000000000000000000000000000000000000000000000000000
05015105050151050505110550151500501510500501510500000000000000000000000000000000000000000000000000000000000000000000000000000000
05015105500151055005110550151500501510500500500500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000050505000000000000000000000000000000000000000000000000000000000000000000000000000000000
00505050005050500050505005050500050505000502520500000000000000000000000000000000000000000000000000000000000000000000000000000000
05025205050252050505220550252500502520500502520500000000000000000000000000000000000000000000000000000000000000000000000000000000
05025205500252055005220550252500502520500500500500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05000000fff88fffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
57500000f887888ff33fff33ffaff7ffff776666ffffffffffffffff0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
5775000087887878f3bff3bbfffffffff76cccccffffffffffffffff0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
5777500088788788ffbbfbfff7ffffaff6cccccc6666fff6ffffffff0000000000000000000000000000000000000000ffffffffffffffffffffafffffffffff
57777500fff77ffffffbbbfffffffffff6cc6cc6ccc76666faff7ff60000000000000000000000000000000000000000ffafffffff7fffffffffffffffffffff
57755000ff7777ffffffbfffffff7ffff66ccc6cccccccccfffff6660000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
05575000fff77fffffffbfffffafffffff7cccccc77ccc7c7ffff6cc0000000000000000000000000000000000000000ffffffffffffffffffffffff7fffffff
00050000fff77fffffffbfffffffffffff6c6c11ccccccc7ffff66cc0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
00000000ff5555ff0000000000000000f66ccc1111111111ffff67cc0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
00000000f555555f0000000000000000f6ccc6111dd11111ffff6ccc0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
00000000555555550000000000000000f7cccc1111dd1111fff76ccc0000000000000000000000000000000000000000fffffffffffffff7ffffffffffffffaf
00000000555555550000000000000000f6c6cc1111111111ff67cc6c0000000000000000000000000000000000000000fffff7ffffffffffffffffffffffffff
00000000555555550000000000000000f66ccc1111111dd1666ccccc0000000000000000000000000000000000000000fffffffffffffffffffffaffffffffff
000000005555555f0000000000000000ff6c6c1111111111c7ccccc10000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
00000000f55555ff0000000000000000ff6cc11111dd1111cccc6cc10000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
00000000fff55fff0000000000000000f76c611111111111cccccc110000000000000000000000000000000000000000fffffffffffffaffffffffffffffffff
000000000000000000000000000000000000000000000000f66ccc110000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000f6ccc6110000000000000000000000000000000000000000fffffffffffffffffffffffff7ffffff
000000000000000000000000000000000000000000000000f7cccc110000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000f6c6cc110000000000000000000000000000000000000000ffffffffffffffffff7fffffffffffff
000000000000000000000000000000000000000000000000f66ccc110000000000000000000000000000000000000000fffaffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000ff6c6c110000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000ff6cc1110000000000000000000000000000000000000000fffffffff7ffffffffffffffffffafff
000000000000000000000000000000000000000000000000f76c61110000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffaffffffffff7fffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7ffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000100000101010000000000000000000000000000000100000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4e4f4c4d4c4d4e4f4c4d4e4f4c4f4c4d4e4f4c4d4e4f4c4d4e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5e5f5c5d5c5d5e5f5c5d5e5f5c5f5c5d5e5f5c5d5e5f5c5d5e5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6e6f6c6d6c6d6e6f6c6d6e6f6c6f6c6d6e6f6c6d6e6f6c6d6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7e7f7c7d7c7d7e7f7c7d7e7f7c7f7c7d7e7f7c7d7e7f7c7d7e7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4f4c4d4e4f4c4d4e4f4c4d4e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5f5c5d5e5f5c5d5e5f5c5d5e5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6f6c6d6e6f6c6d6e6f6c6d6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7f7c7d7e7f7c7d7e7f7c7d7e7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4f4c4d4e4f4c4d4e4f4c4d4e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5f5c5d5e5f5c5d5e5f5c5d5e5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6f6c6d6e6f6c6d6e6f6c6d6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7f7c7d7e7f7c7d7e7f7c7d7e7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4e4f4c4d4e4f4c4d4e4f4c4d4e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5e5f5c5d5e5f5c5d5e5f5c5d5e5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6e6f6c6d6e6f6c6d6e6f6c6d6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7e7f7c7d7e7f7c7d7e7f7c7d7e7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4f4c4d4e4f4c4d4e4f4c4d4e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5f5c5d5e5f5c5d5e5f5c5d5e5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6f6c6d6e6f6c6d6e6f6c6d6e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7f7c7d7e7f7c7d7e7f7c7d7e7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4c4d4e4f4c4d4e4f4c4d4e4f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5c5d5e5f5c5d5e5f5c5d5e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6c6d6e6f6c6d6e6f6c6d6e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7c7d7e7f7c7d7e7f7c7d7e7f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4c4d4e4f4c4d4e4f4c4d4e4f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5c5d5e5f5c5d5e5f5c5d5e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6c6d6e6f6c6d6e6f6c6d6e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7c7d7e7f7c7d7e7f7c7d7e7f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4d4e4f4c4c4d4e4f4c4d4e4f4c4d4e4f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5d5e5f5c5c5d5e5f5c5d5e5f5c5d5e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6d6e6f6c6c6d6e6f6c6d6e6f6c6d6e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7d7e7f7c7c7d7e7f7c7d7e7f7c7d7e7f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
